name: Build and deploy to DEV
run-name: ${{ github.actor }} triggered deploy to DEV pipeline

on:
  push:
    branches:
      - "develop"

env:
  PROJECT_ID: "${{ secrets.PROJECT_ID }}"
  GAR_LOCATION: "${{ secrets.GAR_LOCATION }}"
  SLACK_WEBHOOK_URL: "${{ secrets.SLACK_WEBHOOK_URL}}"
  SLACK_CHANNEL: "${{ secrets.GITHUBACTIONS_SLACK_CHANNEL }}"

jobs:
  build:
    permissions:
      contents: write
      id-token: write
    timeout-minutes: 10
    runs-on: ubuntu-latest
    environment: develop
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "develop"

      - name: Read VERSION file
        id: getversion
        run: |
          sed -n 's/^appVersion:\(.*\)/\1/p' < chart/soursd-web/Chart.yaml > version
          echo "version=$(sed '/.*\"\(.*\)\".*/ s//\1/g' version)" >> $GITHUB_OUTPUT

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}"

      - name: Login to GAR
        id: garlogin
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.PROJECT_ID }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and Push Container
        id: build
        shell: bash
        env:
          GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          GAR_NAME: ${{ secrets.GAR_NAME_WEB }}

        run: |-
          docker build -t '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:${{ github.sha }} -t '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:latest --build-arg NEXT_PUBLIC_API_V1_URL=${{ vars.NEXT_PUBLIC_API_V1_URL }} --build-arg NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }} --build-arg NEXT_MIRAGE_SERVER=${{ vars.NEXT_MIRAGE_SERVER }} --build-arg NEXT_PUBLIC_TEMP_USER_ROLES=${{ vars.NEXT_PUBLIC_TEMP_USER_ROLES }} --build-arg NEXT_PUBLIC_INVITE_TIME_HOURS=${{ vars.NEXT_PUBLIC_INVITE_TIME_HOURS }} --build-arg NEXT_PUBLIC_FILE_DOWNLOAD_URL=${{ vars.NEXT_PUBLIC_FILE_DOWNLOAD_URL }} --build-arg NEXT_PUBLIC_KEYCLOAK_CLIENT_ID=${{ vars.NEXT_PUBLIC_KEYCLOAK_CLIENT_ID }} --build-arg NEXT_PUBLIC_KEYCLOAK_CLIENT_SECRET=${{ secrets.NEXT_PUBLIC_KEYCLOAK_CLIENT_SECRET }} --build-arg NEXT_PUBLIC_KEYCLOAK_REDIRECT_URL_LOGIN=${{ vars.NEXT_PUBLIC_KEYCLOAK_REDIRECT_URL_LOGIN }} --build-arg NEXT_PUBLIC_KEYCLOAK_REDIRECT_URL_LOGOUT=${{ vars.NEXT_PUBLIC_KEYCLOAK_REDIRECT_URL_LOGOUT }} --build-arg NEXT_PUBLIC_KEYCLOAK_REDIRECT_URL_REGISTER=${{ vars.NEXT_PUBLIC_KEYCLOAK_REDIRECT_URL_REGISTER }} --build-arg NEXT_PUBLIC_KEYCLOAK_BASE_URL=${{ vars.NEXT_PUBLIC_KEYCLOAK_BASE_URL }} --build-arg NEXT_PUBLIC_KEYCLOAK_REALM=${{ vars.NEXT_PUBLIC_KEYCLOAK_REALM }} --build-arg NEXT_PUBLIC_KEYCLOAK_TEST_USERNAME=${{ vars.NEXT_PUBLIC_KEYCLOAK_TEST_USERNAME }} --build-arg NEXT_PUBLIC_KEYCLOAK_TEST_PASSWORD=${{ secrets.NEXT_PUBLIC_KEYCLOAK_TEST_PASSWORD }} --build-arg GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} --build-arg NEXT_PUBLIC_LOCAL_ENV=${{ vars.NEXT_PUBLIC_LOCAL_ENV }} --build-arg NEXT_PUBLIC_API_V1_SERVER_URL=${{ vars.NEXT_PUBLIC_API_V1_SERVER_URL }}  --build-arg NEXT_PUBLIC_API_SERVER_URL=${{ vars.NEXT_PUBLIC_API_SERVER_URL }} --build-arg NEXT_PUBLIC_GTM_ID=${{ vars.NEXT_PUBLIC_GTM_ID }} --build-arg IDVT_SUPPLIER_BASE_URL=${{ vars.IDVT_SUPPLIER_BASE_URL }} --build-arg IDVT_SUPPLIER_API_KEY=${{ secrets.IDVT_SUPPLIER_API_KEY }} ./
          docker push --all-tags '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}

  deploy:
    needs: build
    permissions:
      contents: write
      id-token: write

    runs-on: ubuntu-latest
    environment: develop
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: "develop"

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}"

      - name: Read VERSION file
        id: getversion
        run: |
          sed -n 's/^appVersion:\(.*\)/\1/p' < chart/soursd-web/Chart.yaml > version
          echo "version=$(sed '/.*\"\(.*\)\".*/ s//\1/g' version)" >> $GITHUB_OUTPUT

      - name: Deploy to Cloud Run
        uses: actions-hub/gcloud@master
        id: deploy
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
          GAR_NAME: ${{ secrets.GAR_NAME_WEB }}
          SERVICE_NAME: "${{ secrets.SERVICE_NAME_WEB }}"
          SERVICE_REGION: "${{ secrets.SERVICE_REGION_WEB }}"

        with:
          args: run services update '${{ env.SERVICE_NAME }}' --image='${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:${{ github.sha }} --region='${{ env.SERVICE_REGION }}' --project='${{ env.PROJECT_ID }}'

      - name: Run Notification
        id: runnotificationsent
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Deploying {{ env.GITHUB_REF_NAME }} branch to DEV ${{ job.status }}
        if: always()
